<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 29 Apr 2016 11:22:57 +0800</pubDate>
    <lastBuildDate>Fri, 29 Apr 2016 11:22:57 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Jekyll学习</title>
        <description>&lt;p&gt;自己建站&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;首先看其他大神的博客&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1：Github的使用&lt;/li&gt;
    &lt;li&gt;2：Jekyll的使用&lt;/li&gt;
    &lt;li&gt;3：自定义的域名&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;摸索中！！！过几天再来写吧！&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;有问题反馈&lt;/h3&gt;
&lt;p&gt;在使用中有任何问题，欢迎反馈给我！&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Apr 2016 08:32:34 +0800</pubDate>
        <link>/linux/2016/04/28/Jekyll%E5%AD%A6%E4%B9%A0.html</link>
        <guid isPermaLink="true">/linux/2016/04/28/Jekyll%E5%AD%A6%E4%B9%A0.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Git学习笔记</title>
        <description>&lt;h3 id=&quot;git&quot;&gt;Git简介&lt;/h3&gt;
&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统，没有之一！它能够方便地保存所有的版本。&lt;/p&gt;

&lt;h3 id=&quot;git-1&quot;&gt;Git的安装与配置&lt;/h3&gt;
&lt;p&gt;Windows下有较为方便的客户端，便不再详述了，只介绍Linux命令行中的使用方法。&lt;br /&gt;
尝试输入&lt;code&gt;$ git&lt;/code&gt;，就能检查系统有没有安装Git。&lt;br /&gt;
如果系统正好是Debian或Ubuntu，&lt;code&gt;$ sudo apt-get install git&lt;/code&gt;这一句命令就能够方便地完成Git的安装！&lt;br /&gt;
安装完成后，还需要一步设置来自报家门（你的名字和Email地址）：&lt;br /&gt;
&lt;code&gt;$ git config --global user.name &quot;Your Name&quot;  
$ git config --global user.email &quot;email@example.com&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git中的术语&lt;strong&gt;repository&lt;/strong&gt;就是版本库，又名仓库，可以简单理解成Git管理的一个目录。每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）中&lt;strong&gt;不包含中文&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;$ git init&lt;/code&gt;可将这个目录初始化为Git可以管理的仓库。
这时当前目录下会多出一个.git的目录，这个目录是Git来跟踪管理版本库的，千万不要手动修改这个目录里面的文件，不然就把Git仓库给破坏了。&lt;/p&gt;

&lt;h3 id=&quot;git-2&quot;&gt;Git的常用方法&lt;/h3&gt;
&lt;p&gt;(1)&lt;code&gt;$ git status&lt;/code&gt;可以让我们时刻掌握仓库当前的状态。&lt;br /&gt;
(2)&lt;code&gt;$ git diff readme.txt&lt;/code&gt;就是查看文件readme.txt 的改变。&lt;br /&gt;
(3)&lt;code&gt;$ git add readme.txt&lt;/code&gt;  文件readme.txt修改添加到暂存区&lt;br /&gt;
(4)&lt;code&gt;$ git commit -m &quot;3th&quot;&lt;/code&gt;  将暂存区的所有内容提交到当前分支中，“3th”是备注。&lt;br /&gt;
(5)&lt;code&gt;$ git log&lt;/code&gt;  查看版本控制的历史记录&lt;br /&gt;
由于协同工作等原因，使用传统版本编号方式容易冲突，每个版本是以&lt;strong&gt;SHA1值&lt;/strong&gt;来进行编号的，平时使用时输入前几位数即可！&lt;br /&gt;
(6)&lt;code&gt;$ git log --pretty=oneline&lt;/code&gt;只显示历史记录的SHA1值和备注&lt;br /&gt;
(7)&lt;code&gt;$ git reset --hard HEAD^&lt;/code&gt;   回退到上一个版本&lt;br /&gt;
在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100&lt;br /&gt;
(8)&lt;code&gt;$ git reset --hard 3628164&lt;/code&gt;  回退到某一个版本&lt;br /&gt;
代表回退到SHA1值以3628164开头的那个版本&lt;br /&gt;
(9)&lt;code&gt;$ cat readme.txt&lt;/code&gt;  查看readme.txt的内容&lt;br /&gt;
(10)&lt;code&gt;$ git reflog&lt;/code&gt;  记录每一次的输入命令&lt;br /&gt;
(11)&lt;code&gt;$ git checkout -- readme.txt&lt;/code&gt;  回到最近一次git commit或git add时的状态&lt;br /&gt;
(12)&lt;code&gt;$ git reset HEAD readme.txt&lt;/code&gt;  把暂存区的修改撤销掉，重新放回工作区&lt;br /&gt;
(13)&lt;code&gt;$ git rm test.txt&lt;/code&gt;  从版本库中删除该文件  需要配合git commit&lt;br /&gt;
(14)&lt;code&gt;$ git remote add origin git@github.com:eiot/git_project.git&lt;/code&gt; 本地关联远程库&lt;br /&gt;
(15)&lt;code&gt;$ git push -u origin master&lt;/code&gt; 把本地库的所有内容推送到远程库上(第一次-u关联)&lt;br /&gt;
(16)&lt;code&gt;$ git push origin master&lt;/code&gt;&lt;br /&gt;
(17)&lt;code&gt;$ git clone git@github.com:eiot/matlab.git&lt;/code&gt;&lt;br /&gt;
(18)&lt;code&gt;$ git checkout -b dev&lt;/code&gt;  创建并切换至dev分支&lt;br /&gt;
(19)&lt;code&gt;$ git branch&lt;/code&gt;  查看当前分支,当前分支前面会标一个*号&lt;br /&gt;
(20)&lt;code&gt;$ git checkout master&lt;/code&gt;  切换回master分支&lt;br /&gt;
(21)&lt;code&gt;$ git merge dev &lt;/code&gt; 把dev分支的工作成果合并到master分支&lt;br /&gt;
(22)&lt;code&gt;$ git branch -d dev &lt;/code&gt; 删除dev分支&lt;/p&gt;

&lt;p&gt;个人觉得&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot;&gt;廖雪峰&lt;/a&gt;是个蛮不错的Git入门级教程！大家有时间最好多看看！&lt;/p&gt;

&lt;h3 id=&quot;readmemd&quot;&gt;关于README.md文件&lt;/h3&gt;

&lt;p&gt;github上的&lt;strong&gt;README.md&lt;/strong&gt;文件就是使用的Markdown语言编写的，是一种可实现易读易写的轻量级标记语言。&lt;/p&gt;

&lt;p&gt;快速编辑时可参考以下网页：&lt;br /&gt;
* &lt;a href=&quot;https://maxiang.io/&quot;&gt;马克飞象&lt;/a&gt;&lt;br /&gt;
* &lt;a href=&quot;http://mahua.jser.me/&quot;&gt;mou&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;有问题反馈&lt;/h3&gt;
&lt;p&gt;如果您在使用中有任何问题，欢迎反馈给我！&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 08:32:34 +0800</pubDate>
        <link>/linux/2016/03/31/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">/linux/2016/03/31/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
